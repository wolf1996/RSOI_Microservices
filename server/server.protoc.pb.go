// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.protoc

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	server.protoc

It has these top-level messages:
	EventInfo
	Empty
	EventId
	EventsRequest
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventInfo struct {
	Id           int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Participants int64  `protobuf:"varint,3,opt,name=participants" json:"participants,omitempty"`
	Description  string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *EventInfo) Reset()                    { *m = EventInfo{} }
func (m *EventInfo) String() string            { return proto.CompactTextString(m) }
func (*EventInfo) ProtoMessage()               {}
func (*EventInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventInfo) GetParticipants() int64 {
	if m != nil {
		return m.Participants
	}
	return 0
}

func (m *EventInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EventId struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EventId) Reset()                    { *m = EventId{} }
func (m *EventId) String() string            { return proto.CompactTextString(m) }
func (*EventId) ProtoMessage()               {}
func (*EventId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EventId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EventsRequest struct {
	UserId     int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	PageSize   int64 `protobuf:"varint,2,opt,name=pageSize" json:"pageSize,omitempty"`
	PageNumber int64 `protobuf:"varint,3,opt,name=pageNumber" json:"pageNumber,omitempty"`
}

func (m *EventsRequest) Reset()                    { *m = EventsRequest{} }
func (m *EventsRequest) String() string            { return proto.CompactTextString(m) }
func (*EventsRequest) ProtoMessage()               {}
func (*EventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EventsRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *EventsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *EventsRequest) GetPageNumber() int64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*EventInfo)(nil), "EventInfo")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*EventId)(nil), "EventId")
	proto.RegisterType((*EventsRequest)(nil), "EventsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	GetEventInfo(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*EventInfo, error)
	IncrementUsersNumber(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*EventInfo, error)
	DecrementUsersNumber(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*EventInfo, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetEventInfo(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*EventInfo, error) {
	out := new(EventInfo)
	err := grpc.Invoke(ctx, "/EventService/GetEventInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) IncrementUsersNumber(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*EventInfo, error) {
	out := new(EventInfo)
	err := grpc.Invoke(ctx, "/EventService/IncrementUsersNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DecrementUsersNumber(ctx context.Context, in *EventId, opts ...grpc.CallOption) (*EventInfo, error) {
	out := new(EventInfo)
	err := grpc.Invoke(ctx, "/EventService/DecrementUsersNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceServer interface {
	GetEventInfo(context.Context, *EventId) (*EventInfo, error)
	IncrementUsersNumber(context.Context, *EventId) (*EventInfo, error)
	DecrementUsersNumber(context.Context, *EventId) (*EventInfo, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_GetEventInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventService/GetEventInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventInfo(ctx, req.(*EventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_IncrementUsersNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).IncrementUsersNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventService/IncrementUsersNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).IncrementUsersNumber(ctx, req.(*EventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DecrementUsersNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DecrementUsersNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventService/DecrementUsersNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DecrementUsersNumber(ctx, req.(*EventId))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventInfo",
			Handler:    _EventService_GetEventInfo_Handler,
		},
		{
			MethodName: "IncrementUsersNumber",
			Handler:    _EventService_IncrementUsersNumber_Handler,
		},
		{
			MethodName: "DecrementUsersNumber",
			Handler:    _EventService_DecrementUsersNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.protoc",
}

func init() { proto.RegisterFile("server.protoc", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x49, 0x52, 0xfa, 0xe7, 0x48, 0x19, 0x4e, 0x08, 0x85, 0x0e, 0x28, 0xf2, 0x80, 0x3a,
	0x65, 0x80, 0x57, 0xa0, 0x42, 0x59, 0x18, 0x52, 0xf1, 0x00, 0xa9, 0x73, 0x20, 0x0f, 0x71, 0xcc,
	0xd9, 0x8e, 0x04, 0x0f, 0xc2, 0xf3, 0x22, 0x9c, 0x50, 0x0a, 0x03, 0xea, 0x76, 0xdf, 0xe7, 0x9f,
	0xfd, 0x7d, 0xf2, 0xc1, 0xd2, 0x12, 0xf7, 0xc4, 0x85, 0xe1, 0xce, 0x75, 0x52, 0x78, 0x58, 0x6c,
	0x7a, 0xd2, 0xae, 0xd4, 0xcf, 0x1d, 0x9e, 0x43, 0xac, 0x9a, 0x2c, 0xca, 0xa3, 0x75, 0x52, 0xc5,
	0xaa, 0x41, 0x84, 0x89, 0xae, 0x5b, 0xca, 0xe2, 0x3c, 0x5a, 0x2f, 0xaa, 0x30, 0xa3, 0x80, 0xd4,
	0xd4, 0xec, 0x94, 0x54, 0xa6, 0xd6, 0xce, 0x66, 0x49, 0xa0, 0x7f, 0x79, 0x98, 0xc3, 0x59, 0x43,
	0x56, 0xb2, 0x32, 0x4e, 0x75, 0x3a, 0x9b, 0x84, 0xeb, 0x87, 0x96, 0x98, 0xc1, 0xe9, 0xa6, 0x35,
	0xee, 0x4d, 0x5c, 0xc1, 0x6c, 0xc8, 0x6f, 0xfe, 0xa6, 0x0b, 0x09, 0xcb, 0x70, 0x64, 0x2b, 0x7a,
	0xf5, 0x64, 0x1d, 0x5e, 0xc2, 0xd4, 0x5b, 0xe2, 0xf2, 0x1b, 0x1a, 0x15, 0xae, 0x60, 0x6e, 0xea,
	0x17, 0xda, 0xaa, 0xf7, 0xa1, 0x6a, 0x52, 0xed, 0x35, 0x5e, 0x03, 0x7c, 0xcd, 0x8f, 0xbe, 0xdd,
	0x11, 0x8f, 0x65, 0x0f, 0x9c, 0xdb, 0x8f, 0x08, 0xd2, 0x90, 0xb2, 0x25, 0xee, 0x95, 0x24, 0xbc,
	0x81, 0xf4, 0x81, 0xdc, 0xcf, 0x9f, 0xcc, 0x8b, 0xb1, 0xdf, 0x0a, 0x8a, 0xbd, 0x2b, 0x4e, 0xb0,
	0x80, 0x8b, 0x52, 0x4b, 0xa6, 0x96, 0xb4, 0x7b, 0xb2, 0xc4, 0x76, 0x78, 0xf0, 0x3f, 0xfe, 0x9e,
	0x8e, 0xe7, 0x77, 0xd3, 0xb0, 0xa0, 0xbb, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x8c, 0xa8,
	0xb4, 0xb0, 0x01, 0x00, 0x00,
}
